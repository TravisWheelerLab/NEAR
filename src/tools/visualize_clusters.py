import matplotlib.pyplot as plt
import torch
from sklearn.manifold import TSNE
import seaborn as sns

target_embeddings = torch.load("../../embeddings_for_local")
query_embeddings = torch.load("../../query_embeds10.pt")
# %%


querynames = [
    "UniRef90_UPI001CBD4202",
    "UniRef90_A0A6N6PCA8",
    "UniRef90_A0A2Z5JTH0",
    "UniRef90_A0A323UW09",
    "UniRef90_A0A5N6FLV2",
    "UniRef90_A0A554KEK7",
    "UniRef90_M5TRQ9",
]

targetnames = [
    "UniRef90_UPI00145D5826",
    "UniRef90_UPI001675AAB3",
    "UniRef90_UPI0019066093",
    "UniRef90_UPI0003F83BA8",
    "UniRef90_UPI00129BD178",
    "UniRef90_A0A372BZA3",
    "UniRef90_A0A800E6W1",
]
# QUERIES
"""
UniRef90_A0A323UW09: UniRef90_UPI0003F83BA8, UniRef90_A0A7C2N708
UniRef90_A0A554KEK7: UniRef90_A0A372BZA3
UniRef90_M5TRQ9: UniRef90_A0A800E6W1
UniRef90_A0A6N6PCA8: UniRef90_UPI001675AAB3
UniRef90_A0A2Z5JTH0: UniRef90_UPI0019066093 --largest
UniRef90_A0A5N6FLV2: UniRef90_UPI00129BD178 
UniRef90_UPI001CBD4202: UniRef90_UPI00145D5826


UniRef90_A0A323UW09
MPLSIGVPAETIAGERRISVVPDVVKKYQGLGARVVMQTGAGVPAHYVDAGFAGVDFVEDAQVICADADLLLCVQPPSAQRIAAMKPGSVLLGMLQPWSDVERVKLLQARQITAFALELLPRISRSQSMDALSSQAAVAGYECALIAADHSPKFFPMLTYAAGTIRPAKVLVIGAGVAGLQAIATARRIGAMVEAYDVRPETREQIESLGAKFVDTGVAAAGSGGYARELTDEEKARQAERLAKAVGQCDALITTAAIPGKRAPRIITADMIARMKPGAVVVDMAAESGGNVEGTVAGEKVWINDVLVIGPTHITSRMPVHASEMYAKNLYNFISPFIKDGALALDWEDEVVAGCCLTHAGEVRHAGVAQVLGLQGA
UniRef90_A0A554KEK7
MYANQDNQLLRAFFASRTVLVILFLLLIGAGVASFRALMVGWEVEAERREVEEEIQQLKAQKEALAGELADLHSGRGIEREAREKFNYRKPGEEVVIIVDSEGSSKVEEKIDSFSLLDTVKKIFNFTIFNFQ
UniRef90_M5TRQ9
MKTFILSRLVMLVFWQRAAETLASTTLAAVSLAAVAQAADKPSVMPVRHAKTLSKYCFDCHDSDTREGRVDLEDLPFDLGSEIQVAQRWQEVLGALNAGDMPPKDSPRLSVDEKTELLADLSEKLVVARQIHGDGGGVIKMRRLNQREYANTINDLLGVRPNVDGLPNDRAGIGFDTAGASLYFSSSQFEQYLAVGRAALQQALAKEEASPKQIGRVSYSRIHSVATHSVGVNFSPVVEP
UniRef90_A0A6N6PCA8
MMSSFHSGRKGQRGFLLLEVILALAVFSAAATGFAVAMHRMAAAAGLAQNELRITRILDSALDETLSLPQLEEGRTSNPIGKSGIEMTTAITLLNNLENKDGVKLQETYLITVSARWYETGVWKERAAETWRYGRMYQP
UniRef90_A0A2Z5JTH0
MLCTLIVGLGRAGLGLHVPVLLRARSQALAAFADHPIVGVDPGNGSPPGQRDLLIADSLRQACDLVDPARTVVHLCTPPAVRVEVLREVAALGFSRILAEKPLAGDREALRSLLRLAREHDLRLSVVAPWLHSALTRRLVRLVGDRRLGEVRSVSVIQHKPRFRRSLGSGSHTSAFDVEAPHAVGVLLRLLGDARVHRATGTDLRVGPVTVPRMGGAHLELLHADGIRSEVLSDLSAPVRQRRIALDMAGGSVVGHYAVGQDDDFAQLEITRDGHTTREVFPDDSLRSCLTQAYRDFAACGEGTGSDDLGLHVRTVELLDEAKRLAADEQAAAPPTGGGTRRKEAITHGR
UniRef90_A0A5N6FLV2
MPLARPYTFPHGDLTNINIMVVEVSVSQVFMIGKRLAIFPVWWEYVCTSGTDSRRIGNYSAARKVLARLLVSLPGSHA
UniRef90_UPI001CBD4202
MSSNSNDLRTPLKRARGLGSGKDGTGHFIWQRVTAIAVALSGIWLLGVLLSLRTASYPYIRDLVVDPINATVLIVFLLGAFWHARLGLQVVIEDYVHTPLTAGIAHFANIFVCALASIAGVLAVLRIALGS
"""

# TARGETS
"""
UniRef90_UPI00145D5826
MARFRTPLAVVRGLGSAREGTEHFWRQRLTAVANVPLVLFFVGLMVALNGASHAQVVATLANPFVTIVMLLALASMLYHMKLGMQVVIEDYVHSEPLRTILIMLNIFFPLVAGLVSAFALLKISFGG

UniRef90_UPI001675AAB3
MKTAGGTRGFTLLELLVVMALLSLLMLGMGSALRSTARVEQGVDARLARADAMRVTSDFLRTVLSRVSARQGAPSAARPDAHYFAGSADSLWWLGVMPARHGAGGMHHFRLGIEAAGLVLRYQAWRGEALPDWDRAESLLLVAGATQMALRFEDDRRLPSRWVDDWTAPEAMPRRVSLEVATPSQAWPAVVVQMRALPGTDPTLASEPSYGGGR

UniRef90_UPI0019066093
MKQPLIVGLGRAGSGLHLRALRTARDRSPDLWRGPVVAVDPRPGERAPVPDDVTVTPTLDEARALLPPDRAVVHVCTPPDSRPAVLAELCAAGYRDLIVEKPLATGERERAAVAGLRSRYGPRLAVVAHWPASGLADRLRALIASGTLGPLLRVDVTQHKPRFTRSLRADDGHPTAFDVELPHSLGLVLSLAGPAEVTGARLTDLRIGETVRPGLGSAHLELLHAGGVRTRVHSDLTAPVRERRVVLAFERGTAVAHFAPSDADDHVQLDVDGRREVFRDDALAAFLHRAYTRFAAVPAEDPTWDADFALHDDVVRLLDEARRRCAASPAGERHEEAPHVGVR

UniRef90_UPI0003F83BA8
MADTEAGSAGGATVGVVAETAAGERRVALVPKMVERLVKRGMRVIVAEGAGAGAFLADSAYTEAGAAIGDPYQADIVVRVAPPTDEEIARLRKGSVVIGFLAPLSDPDRVAKLEQAGVIAFAMESIPRISRAQAMDALSSQANVAGYRAALLAATHLARFFPMLTTAAGTVKPARALVLGAGVAGLQALATCKRLGAQTTGYDVRPEVADQVRSVGAQWLDLGIEAVGEGGYARELTEEERAEQQRRLTDAITGFDVVITTAQVPGRKAPTLVTADAVERMKAGSVIVDLAGDSGGNCELTEPGQVVVKHDVTIVAPSNLPAEMPDHASELYSRNVVELLELLVDDNGALAIDVGDEIVAKACVAGRALLPAAPEPATEQSGEA

UniRef90_UPI00129BD178
MDTLNRSTAYHKSRLGRILVQQGYISQEQLDEALEEQGAASASDAKLGEVLLAQKQLSAWQLRRAMNVQKRARFAASIICTVLGTILDSISSGSKVLKVRDAQSVARLMSQLIQVLPEGYSLLSLSYDLDHSRADIELDNSVTLAIPSSAGELSIANVRLNGRVPKDYDLLTIDHFDLKEVTVTLDTTVEMKKGATTPSSDAPNQ

UniRef90_A0A372BZA3
MSQQINLYQPIFRKEKIVFSAQTIAWLSLGLVVLLALWSLLVGQRVAGLETELERQQQAEQRAVRQVAELQSSMPPEQPDAVLQAQIERLQARRDGLQESLTALERRMPAAEINLLARLDALSAEIPDGLWLTGLLMAAQGQTLTLHGNALEARLVPAWLSELSTVEQFSGLGFRQIRLKERPDGQPGVQFTISTAAEETP

UniRef90_A0A800E6W1
MIGMRSDSPWKTAAISVLLLASTSGFTAPVVGQEAQPKASSFKATATRFVSQYCTKCHGAKRQKGDMRLDNIGHDMSDDKTARQWNDIFAQLQFREMPPPPHESATTNNTPKPPPKFSRRFAPEI

"""

query_embeds = [
    query_embeddings[6],
    query_embeddings[3],
    query_embeddings[4],  # largest
    query_embeddings[0],
    query_embeddings[5],
    query_embeddings[1],
    query_embeddings[2],
]

query_seqs = [
    "MSSNSNDLRTPLKRARGLGSGKDGTGHFIWQRVTAIAVALSGIWLLGVLLSLRTASYPYIRDLVVDPINATVLIVFLLGAFWHARLGLQVVIEDYVHTPLTAGIAHFANIFVCALASIAGVLAVLRIALGS",
    "MMSSFHSGRKGQRGFLLLEVILALAVFSAAATGFAVAMHRMAAAAGLAQNELRITRILDSALDETLSLPQLEEGRTSNPIGKSGIEMTTAITLLNNLENKDGVKLQETYLITVSARWYETGVWKERAAETWRYGRMYQP",
    "MLCTLIVGLGRAGLGLHVPVLLRARSQALAAFADHPIVGVDPGNGSPPGQRDLLIADSLRQACDLVDPARTVVHLCTPPAVRVEVLREVAALGFSRILAEKPLAGDREALRSLLRLAREHDLRLSVVAPWLHSALTRRLVRLVGDRRLGEVRSVSVIQHKPRFRRSLGSGSHTSAFDVEAPHAVGVLLRLLGDARVHRATGTDLRVGPVTVPRMGGAHLELLHADGIRSEVLSDLSAPVRQRRIALDMAGGSVVGHYAVGQDDDFAQLEITRDGHTTREVFPDDSLRSCLTQAYRDFAACGEGTGSDDLGLHVRTVELLDEAKRLAADEQAAAPPTGGGTRRKEAITHGR",
    "MPLSIGVPAETIAGERRISVVPDVVKKYQGLGARVVMQTGAGVPAHYVDAGFAGVDFVEDAQVICADADLLLCVQPPSAQRIAAMKPGSVLLGMLQPWSDVERVKLLQARQITAFALELLPRISRSQSMDALSSQAAVAGYECALIAADHSPKFFPMLTYAAGTIRPAKVLVIGAGVAGLQAIATARRIGAMVEAYDVRPETREQIESLGAKFVDTGVAAAGSGGYARELTDEEKARQAERLAKAVGQCDALITTAAIPGKRAPRIITADMIARMKPGAVVVDMAAESGGNVEGTVAGEKVWINDVLVIGPTHITSRMPVHASEMYAKNLYNFISPFIKDGALALDWEDEVVAGCCLTHAGEVRHAGVAQVLGLQGA",
    "MPLARPYTFPHGDLTNINIMVVEVSVSQVFMIGKRLAIFPVWWEYVCTSGTDSRRIGNYSAARKVLARLLVSLPGSHA",
    "MYANQDNQLLRAFFASRTVLVILFLLLIGAGVASFRALMVGWEVEAERREVEEEIQQLKAQKEALAGELADLHSGRGIEREAREKFNYRKPGEEVVIIVDSEGSSKVEEKIDSFSLLDTVKKIFNFTIFNFQ",
    "MKTFILSRLVMLVFWQRAAETLASTTLAAVSLAAVAQAADKPSVMPVRHAKTLSKYCFDCHDSDTREGRVDLEDLPFDLGSEIQVAQRWQEVLGALNAGDMPPKDSPRLSVDEKTELLADLSEKLVVARQIHGDGGGVIKMRRLNQREYANTINDLLGVRPNVDGLPNDRAGIGFDTAGASLYFSSSQFEQYLAVGRAALQQALAKEEASPKQIGRVSYSRIHSVATHSVGVNFSPVVEP",
]

target_seqs = [
    "MARFRTPLAVVRGLGSAREGTEHFWRQRLTAVANVPLVLFFVGLMVALNGASHAQVVATLANPFVTIVMLLALASMLYHMKLGMQVVIEDYVHSEPLRTILIMLNIFFPLVAGLVSAFALLKISFGG",
    "MKTAGGTRGFTLLELLVVMALLSLLMLGMGSALRSTARVEQGVDARLARADAMRVTSDFLRTVLSRVSARQGAPSAARPDAHYFAGSADSLWWLGVMPARHGAGGMHHFRLGIEAAGLVLRYQAWRGEALPDWDRAESLLLVAGATQMALRFEDDRRLPSRWVDDWTAPEAMPRRVSLEVATPSQAWPAVVVQMRALPGTDPTLASEPSYGGGR",
    "MKQPLIVGLGRAGSGLHLRALRTARDRSPDLWRGPVVAVDPRPGERAPVPDDVTVTPTLDEARALLPPDRAVVHVCTPPDSRPAVLAELCAAGYRDLIVEKPLATGERERAAVAGLRSRYGPRLAVVAHWPASGLADRLRALIASGTLGPLLRVDVTQHKPRFTRSLRADDGHPTAFDVELPHSLGLVLSLAGPAEVTGARLTDLRIGETVRPGLGSAHLELLHAGGVRTRVHSDLTAPVRERRVVLAFERGTAVAHFAPSDADDHVQLDVDGRREVFRDDALAAFLHRAYTRFAAVPAEDPTWDADFALHDDVVRLLDEARRRCAASPAGERHEEAPHVGVR",
    "MADTEAGSAGGATVGVVAETAAGERRVALVPKMVERLVKRGMRVIVAEGAGAGAFLADSAYTEAGAAIGDPYQADIVVRVAPPTDEEIARLRKGSVVIGFLAPLSDPDRVAKLEQAGVIAFAMESIPRISRAQAMDALSSQANVAGYRAALLAATHLARFFPMLTTAAGTVKPARALVLGAGVAGLQALATCKRLGAQTTGYDVRPEVADQVRSVGAQWLDLGIEAVGEGGYARELTEEERAEQQRRLTDAITGFDVVITTAQVPGRKAPTLVTADAVERMKAGSVIVDLAGDSGGNCELTEPGQVVVKHDVTIVAPSNLPAEMPDHASELYSRNVVELLELLVDDNGALAIDVGDEIVAKACVAGRALLPAAPEPATEQSGEA",
    "MDTLNRSTAYHKSRLGRILVQQGYISQEQLDEALEEQGAASASDAKLGEVLLAQKQLSAWQLRRAMNVQKRARFAASIICTVLGTILDSISSGSKVLKVRDAQSVARLMSQLIQVLPEGYSLLSLSYDLDHSRADIELDNSVTLAIPSSAGELSIANVRLNGRVPKDYDLLTIDHFDLKEVTVTLDTTVEMKKGATTPSSDAPNQ",
    "MSQQINLYQPIFRKEKIVFSAQTIAWLSLGLVVLLALWSLLVGQRVAGLETELERQQQAEQRAVRQVAELQSSMPPEQPDAVLQAQIERLQARRDGLQESLTALERRMPAAEINLLARLDALSAEIPDGLWLTGLLMAAQGQTLTLHGNALEARLVPAWLSELSTVEQFSGLGFRQIRLKERPDGQPGVQFTISTAAEETP",
    "MIGMRSDSPWKTAAISVLLLASTSGFTAPVVGQEAQPKASSFKATATRFVSQYCTKCHGAKRQKGDMRLDNIGHDMSDDKTARQWNDIFAQLQFREMPPPPHESATTNNTPKPPPKFSRRFAPEI",
]

embeddings = torch.load("/xdisk/twheeler/daphnedemekas/prefilter/target_embeddings.pt")


def sequence_representation(embeddings, max_len=100):
    embed = [e[:max_len] for e in embeddings[::50] if len(e) >= max_len]
    embed_t = torch.stack(embed, dim=0)
    embed_tt = embed_t.reshape(embed_t.shape[0], embed_t.shape[1] * embed_t.shape[2])
    return embed_tt


def amino_representation(embeddings):
    amino_embeddings = torch.cat(embeddings[::20000], dim=0)
    return amino_embeddings


seq_embeddings = amino_representation(embeddings)

# %%
import os


for i, (seq1, seq2) in enumerate(zip(query_seqs, target_seqs)):
    print(seq1)
    print(seq2)
    os.mkdir(f"output/{i}")
    embeddings = [query_embeds[i], target_embeddings[i]]
    unique_aminos = list(set(seq1 + seq2))

    tsne = TSNE(2, verbose=1)
    amino_embeddings = amino_representation(embeddings)

    tsne_proj = tsne.fit_transform(amino_embeddings)

    for a in unique_aminos:
        colors1 = ["orange" if amino == a else "gray" for amino in seq1]
        colors2 = ["blue" if amino == a else "gray" for amino in seq2]

        plt.figure(figsize=(8, 6))
        plt.scatter(
            tsne_proj[: len(seq1), 0],
            tsne_proj[: len(seq1), 1],
            alpha=0.8,
            c=colors1,
            label=querynames[i].split("_")[1],
        )
        plt.scatter(
            tsne_proj[len(seq1) :, 0],
            tsne_proj[len(seq1) :, 1],
            alpha=0.8,
            marker="x",
            c=colors2,
            label=targetnames[i].split("_")[1],
        )
        plt.title(f"Amino: {a}")
        plt.xlabel("X")
        plt.ylabel("Y")
        plt.legend()
        plt.savefig(f"output/{i}/{a}.png")

        plt.clf()
    # %

# %%
print(f"Projection shape : {tsne_proj.shape})")

sns.set_style("darkgrid")
plt.figure(figsize=(5, 4))
plot_axes = plt.axes(projection="3d")
plot_axes.scatter3D(tsne_proj[:, 0], tsne_proj[:, 1], tsne_proj[:, 2], alpha=0.3)
plot_axes.set_xlabel("x")
plot_axes.set_ylabel("y")
plot_axes.set_zlabel("z")
plt.xlim(-100, 0)
plt.ylim(0, 400)
plot_axes.set_zlim(-100, 0)
plt.title("Amino-wise t-SNE ")

plt.savefig("tnse3d_.png")
