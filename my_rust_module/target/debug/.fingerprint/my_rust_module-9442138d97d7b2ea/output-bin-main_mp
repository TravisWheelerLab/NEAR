{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3072,"byte_end":3073,"line_start":90,"line_end":90,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":38,"highlight_end":39}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but there is no value for it to be borrowed from","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using the `'static` lifetime","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3073,"byte_end":3073,"line_start":90,"line_end":90,"column_start":39,"column_end":39,"is_primary":true,"text":[{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":39,"highlight_end":39}],"label":null,"suggested_replacement":"'static ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:90:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using the `'static` lifetime\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        static MATCH_SCORES: RefCell<&\u001b[0m\u001b[0m\u001b[38;5;10m'static \u001b[0m\u001b[0mVec<f64>> = RefCell::new(&vec![0.0; 1000]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3072,"byte_end":3073,"line_start":90,"line_end":90,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":38,"highlight_end":39}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":3023,"byte_end":3078,"line_start":83,"line_end":83,"column_start":23,"column_end":78,"is_primary":false,"text":[],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 2 lifetimes it is borrowed from","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3073,"byte_end":3073,"line_start":90,"line_end":90,"column_start":39,"column_end":39,"is_primary":true,"text":[{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":39,"highlight_end":39}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/bin/main_mp.rs","byte_start":3073,"byte_end":3073,"line_start":90,"line_end":90,"column_start":39,"column_end":39,"is_primary":true,"text":[{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":39,"highlight_end":39}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":2999,"byte_end":2999,"line_start":82,"line_end":82,"column_start":30,"column_end":30,"is_primary":true,"text":[],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":3047,"byte_end":3047,"line_start":83,"line_end":83,"column_start":47,"column_end":47,"is_primary":true,"text":[],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:90:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    thread_local! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 2 lifetimes it is borrowed from\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3149,"byte_end":3150,"line_start":91,"line_end":91,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":33,"highlight_end":34}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but there is no value for it to be borrowed from","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using the `'static` lifetime","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3150,"byte_end":3150,"line_start":91,"line_end":91,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"'static ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:91:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using the `'static` lifetime\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        static INDICES: RefCell<&\u001b[0m\u001b[0m\u001b[38;5;10m'static \u001b[0m\u001b[0mVec<usize>> = RefCell::new(&vec![0; 1000]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3149,"byte_end":3150,"line_start":91,"line_end":91,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":33,"highlight_end":34}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":3023,"byte_end":3078,"line_start":83,"line_end":83,"column_start":23,"column_end":78,"is_primary":false,"text":[],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 2 lifetimes it is borrowed from","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3150,"byte_end":3150,"line_start":91,"line_end":91,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/bin/main_mp.rs","byte_start":3150,"byte_end":3150,"line_start":91,"line_end":91,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":2999,"byte_end":2999,"line_start":82,"line_end":82,"column_start":30,"column_end":30,"is_primary":true,"text":[],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":3047,"byte_end":3047,"line_start":83,"line_end":83,"column_start":47,"column_end":47,"is_primary":true,"text":[],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:91:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    thread_local! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 2 lifetimes it is borrowed from\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3229,"byte_end":3230,"line_start":93,"line_end":93,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":35,"highlight_end":36}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but there is no value for it to be borrowed from","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using the `'static` lifetime","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3230,"byte_end":3230,"line_start":93,"line_end":93,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"'static ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:93:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using the `'static` lifetime\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        static NAMES: RefCell<Vec<&\u001b[0m\u001b[0m\u001b[38;5;10m'static \u001b[0m\u001b[0mString>> = RefCell::new(vec![&\"\".to_string(); 1000]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3229,"byte_end":3230,"line_start":93,"line_end":93,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":35,"highlight_end":36}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":3023,"byte_end":3078,"line_start":83,"line_end":83,"column_start":23,"column_end":78,"is_primary":false,"text":[],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 2 lifetimes it is borrowed from","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3230,"byte_end":3230,"line_start":93,"line_end":93,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/bin/main_mp.rs","byte_start":3230,"byte_end":3230,"line_start":93,"line_end":93,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":2999,"byte_end":2999,"line_start":82,"line_end":82,"column_start":30,"column_end":30,"is_primary":true,"text":[],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":3047,"byte_end":3047,"line_start":83,"line_end":83,"column_start":47,"column_end":47,"is_primary":true,"text":[],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:93:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    thread_local! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 2 lifetimes it is borrowed from\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3417,"byte_end":3418,"line_start":97,"line_end":97,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":42,"highlight_end":43}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but there is no value for it to be borrowed from","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using the `'static` lifetime","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3418,"byte_end":3418,"line_start":97,"line_end":97,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"'static ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:97:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using the `'static` lifetime\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        static SORTED_NAMES: RefCell<Vec<&\u001b[0m\u001b[0m\u001b[38;5;10m'static \u001b[0m\u001b[0mString>> = RefCell::new(vec![&\"\".to_string(); 1000]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3417,"byte_end":3418,"line_start":97,"line_end":97,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":42,"highlight_end":43}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":3023,"byte_end":3078,"line_start":83,"line_end":83,"column_start":23,"column_end":78,"is_primary":false,"text":[],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 2 lifetimes it is borrowed from","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":3418,"byte_end":3418,"line_start":97,"line_end":97,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/bin/main_mp.rs","byte_start":3418,"byte_end":3418,"line_start":97,"line_end":97,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":2999,"byte_end":2999,"line_start":82,"line_end":82,"column_start":30,"column_end":30,"is_primary":true,"text":[],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":3047,"byte_end":3047,"line_start":83,"line_end":83,"column_start":47,"column_end":47,"is_primary":true,"text":[],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":4396,"byte_end":4463,"line_start":114,"line_end":114,"column_start":13,"column_end":80,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7239,"byte_end":7322,"line_start":184,"line_end":184,"column_start":9,"column_end":92,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":7332,"byte_end":7364,"line_start":185,"line_end":185,"column_start":9,"column_end":41,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":3010,"byte_end":3643,"line_start":88,"line_end":102,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    thread_local! {","highlight_start":5,"highlight_end":20},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCH_IDX: RefCell<Vec<usize>> = RefCell::new((0..1000).collect());","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_INDICES: RefCell<Vec<usize>> = RefCell::new(vec![0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread_local!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/thread/local.rs","byte_start":6573,"byte_end":6598,"line_start":169,"line_end":169,"column_start":1,"column_end":26,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/rustc/d3f416dc063fc478c7250873246cb2d4136d8c42/library/std/src/sys/common/thread_local/fast_local.rs","byte_start":377,"byte_end":405,"line_start":11,"line_end":11,"column_start":1,"column_end":29,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:97:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    thread_local! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static MATCH_SCORES: RefCell<&Vec<f64>> = RefCell::new(&vec![0.0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static INDICES: RefCell<&Vec<usize>> = RefCell::new(&vec![0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static SORTED_NAMES: RefCell<Vec<&String>> = RefCell::new(vec![&\"\".to_string(); 1000]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static SORTED_MATCHES: RefCell<Vec<f64>> = RefCell::new(vec![0.0; 1000]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 2 lifetimes it is borrowed from\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":4720,"byte_end":4744,"line_start":123,"line_end":123,"column_start":28,"column_end":52,"is_primary":true,"text":[{"text":"            match_scores = &scores_array[match_idx];","highlight_start":28,"highlight_end":52}],"label":"expected `RefMut<'_, &Vec<f64>>`, found `&Vec<f64>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/main_mp.rs","byte_start":4291,"byte_end":4321,"line_start":116,"line_end":116,"column_start":32,"column_end":62,"is_primary":false,"text":[{"text":"            let match_scores = match_scores_cell.borrow_mut();","highlight_start":32,"highlight_end":62}],"label":"expected due to this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `RefMut<'_, &'static Vec<f64>>`\nfound reference `&Vec<f64>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider dereferencing here to assign to the mutably borrowed value","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":4705,"byte_end":4705,"line_start":123,"line_end":123,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            match_scores = &scores_array[match_idx];","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"*","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:123:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let match_scores = match_scores_cell.borrow_mut();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected due to this value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match_scores = &scores_array[match_idx];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `RefMut<'_, &Vec<f64>>`, found `&Vec<f64>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mRefMut<'_, &'static Vec<f64>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found reference `\u001b[0m\u001b[0m\u001b[1m&Vec<f64>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider dereferencing here to assign to the mutably borrowed value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m*\u001b[0m\u001b[0mmatch_scores = &scores_array[match_idx];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":4769,"byte_end":4794,"line_start":125,"line_end":125,"column_start":23,"column_end":48,"is_primary":true,"text":[{"text":"            indices = &indices_array[match_idx];","highlight_start":23,"highlight_end":48}],"label":"expected `RefMut<'_, &Vec<usize>>`, found `&Vec<usize>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/main_mp.rs","byte_start":4349,"byte_end":4374,"line_start":117,"line_end":117,"column_start":27,"column_end":52,"is_primary":false,"text":[{"text":"            let indices = indices_cell.borrow_mut();","highlight_start":27,"highlight_end":52}],"label":"expected due to this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `RefMut<'_, &'static Vec<usize>>`\nfound reference `&Vec<usize>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider dereferencing here to assign to the mutably borrowed value","code":null,"level":"help","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":4759,"byte_end":4759,"line_start":125,"line_end":125,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            indices = &indices_array[match_idx];","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"*","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:125:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let indices = indices_cell.borrow_mut();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected due to this value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            indices = &indices_array[match_idx];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `RefMut<'_, &Vec<usize>>`, found `&Vec<usize>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mRefMut<'_, &'static Vec<usize>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found reference `\u001b[0m\u001b[0m\u001b[1m&Vec<usize>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider dereferencing here to assign to the mutably borrowed value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m*\u001b[0m\u001b[0mindices = &indices_array[match_idx];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"`&RefMut<'_, Vec<usize>>` is not an iterator","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":5293,"byte_end":5310,"line_start":142,"line_end":142,"column_start":25,"column_end":42,"is_primary":true,"text":[{"text":"            for &idx in &sorted_match_idx {","highlight_start":25,"highlight_end":42}],"label":"`&RefMut<'_, Vec<usize>>` is not an iterator","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/main_mp.rs","byte_start":5293,"byte_end":5310,"line_start":142,"line_end":142,"column_start":25,"column_end":42,"is_primary":false,"text":[{"text":"            for &idx in &sorted_match_idx {","highlight_start":25,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/bin/main_mp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Iterator` is not implemented for `&RefMut<'_, Vec<usize>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&RefMut<'_, Vec<usize>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `&RefMut<'_, Vec<usize>>` is not an iterator\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:142:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            for &idx in &sorted_match_idx {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`&RefMut<'_, Vec<usize>>` is not an iterator\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Iterator` is not implemented for `&RefMut<'_, Vec<usize>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&RefMut<'_, Vec<usize>>` to implement `IntoIterator`\u001b[0m\n\n"}
{"message":"type `usize` cannot be dereferenced","code":{"code":"E0614","explanation":"Attempted to dereference a variable which cannot be dereferenced.\n\nErroneous code example:\n\n```compile_fail,E0614\nlet y = 0u32;\n*y; // error: type `u32` cannot be dereferenced\n```\n\nOnly types implementing `std::ops::Deref` can be dereferenced (such as `&T`).\nExample:\n\n```\nlet y = 0u32;\nlet x = &y;\n// So here, `x` is a `&u32`, so we can dereference it:\n*x; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/main_mp.rs","byte_start":6322,"byte_end":6326,"line_start":167,"line_end":167,"column_start":42,"column_end":46,"is_primary":true,"text":[{"text":"                .map(|&idx| target_names[*idx].clone())","highlight_start":42,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0614]\u001b[0m\u001b[0m\u001b[1m: type `usize` cannot be dereferenced\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/main_mp.rs:167:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .map(|&idx| target_names[*idx].clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"aborting due to 12 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 12 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0106, E0277, E0308, E0614.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0106, E0277, E0308, E0614.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0106`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0106`.\u001b[0m\n"}
